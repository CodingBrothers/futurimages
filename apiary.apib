FORMAT: 1A

# Futurimages v1 API Documentation
This describes the resources that make up the official **Futurimages v1 API**. At the moment, this API represents the only way how to access [Futurimages](http://www.futurimages.com) programatically.
It's based on REST principles.

## Current Version
The current version is `v1`. Which is also the only version available at the same time.

## Schema
**All API access is over HTTPS**, and accessed from the [apiv1.futurimages.com](apiv1.futurimages.com) domain.
All data is sent and received as JSON.

Blank fields are included as `null` instead of being omitted.

All timestamps are returned in ISO 8601 format:
>YYYY-MM-DDTHH:MM:SSZ

### Summary Representations
When you fetch a list of resources, the response includes a subset of the attributes for that resource.
This is the “summary” representation of the resource. (Some attributes are computationally expensive for
the API to provide. For performance reasons, the summary representation excludes those attributes.
To obtain those attributes, fetch the “detailed” representation.)

### Detailed Representations
When you fetch an individual resource, the response typically includes all attributes for that resource.
This is the “detailed” representation of the resource. (Note that authorization sometimes influences
the amount of detail included in the representation.)

The documentation provides an example response for each API method. The example response illustrates all
attributes that are returned by that method.

## Client Errors
There are three possible types of client errors on API calls that receive request bodies:

1\. Sending invalid JSON will result in a `400 Bad Request` response.

<pre><code>HTTP/1.1 400 Bad Request
Content-Length: 35

{"message": "Problems parsing JSON"}
</code></pre>

2\. Sending the wrong type of JSON values will result in a `400 Bad Request` response.

<pre><code>HTTP/1.1 400 Bad Request
Content-Length: 40

{"message": "Body should be a JSON object"}
</code></pre>
 
3\. Sending invalid fields will result in a `422 Unprocessable Entity` response.

<pre><code>HTTP/1.1 422 Unprocessable Entity
Content-Length: 149

{
    "message": "Validation Failed",
    "errors": [
        {
            "resource": "Issue",
            "field": "title",
            "code": "missing_field"
        }
    ]
}
</code></pre>

All error objects have resource and field properties so that your client can tell what the problem is.
There’s also an error code to let you know what is wrong with the field. These are the possible validation
error codes:

| Error Name | Description |
|-------|------|
| missing | This means a resource does not exist. |
| missing_field | This means a required field on a resource has not been set. |
| invalid | This means the formatting of a field is invalid. The documentation for that resource should be able to give you more specific information. |
| already_exists | This means another resource has the same value as this field. This can happen in resources that must have some unique key (such as Label names). |

If resources have custom validation errors, they will be documented with the resource.

## HTTP Redirects

API v1 uses HTTP redirection where appropriate. Clients should assume that any request may result in a
redirection. Receiving an HTTP redirection is not an error and clients should follow that redirect.
Redirect responses will have a `Location` header field which contains the URI of the resource to which the
client should repeat the requests.

| Status Code | Description |
|-------|------|
| 301 | Permanent redirection. The URI you used to make the request has been superseded by the one specified in the Location header field. This and all future requests to this resource should be directed to the new URI. |
| 302, 307 | Temporary redirection. The request should be repeated verbatim to the URI specified in the Location header field but clients should continue to use the original URI for future requests. |

Other redirection status codes may be used in accordance with the HTTP 1.1 spec.

## HTTP Verbs

Where possible, API v3 strives to use appropriate HTTP verbs for each action.

| Verb | Description |
|-------|------|
| GET | Used for retrieving resources. |
| POST | Used for creating resources, or performing custom actions (such as merging a pull request). |
| PUT | Used for replacing resources or collections. For PUT requests with no body attribute, be sure to set the Content-Length header to zero. |
| DELETE | Used for deleting resources. |

## Authentication

At the moment, the API makes use of [Google+](https://developers.google.com/+) services for authentication/authorization purposes and managing User identity.

This means OAuth2 is used which also implies a developer must have his app registered prior to calling this API.
Please [contact](http://www.futurimages.com/contact) Futurimages team in case you plan to develop a custom app.

If not explicitly stated, the API returns either `401 Unauthorized` or `403 Forbidden` in case
of issues related to security.

## Pagination

Requests that return multiple items will be paginated to 20 items by default. You can specify further
pages with the `page` parameter. For some resources, you can also set a custom page size with the `per_page` parameter.
Note that for technical reasons not all endpoints either respect the `per_page` parameter, or set a maximum value.

>$ curl 'https://apiv1.futurimages.com/images/public?page=2&per_page=100'

Note that page numbering is 1-based and that omitting the `page` parameter will return the first page.

### Link Header

The pagination info is included in [the Link header](http://tools.ietf.org/html/rfc5988). It is recommended to follow these Link header values
instead of constructing your own URLs.

>Link: <https://api.github.com/user/repos?page=3&per_page=100>; rel="next",  
><https://api.github.com/user/repos?page=50&per_page=100>; rel="last"

_Linebreak is included for readability._

The possible `rel` values are:

| Name | Description |
|-------|------|
| next | Shows the URL of the immediate next page of results. |
| last | Shows the URL of the last page of results. |
| first | Shows the URL of the first page of results. |
| prev | Shows the URL of the immediate previous page of results. |

## Rate Limiting

At the moment, the API does not enforce any amount of rate limiting. Yet developers should note that it
may change anytime in the future.

## Conditional requests

Most responses return an `ETag` header. Many responses also return a `Last-Modified` header. You can use
the values of these headers to make subsequent requests to those resources using the `If-None-Match` and
`If-Modified-Since` headers, respectively. If the resource has not changed, the server will return a
`304 Not Modified`.

## JSON-P Callbacks

Not supported at the moment.


# Group Image
Image-related resources of the **Futurimages API**

## Image [/images/{id}]
A single Image object. The Image resource is the central resource of the API. It represents an image uploaded
by a user (although the returned image format may differ from the original one which was actually uploaded).

The Image resource has the following attributes:

- id (string): ID of the Image (currently, it will always be a SHA-1 hash string)
- created_at (timestamp): Date of Image upload
- name (string): Image name
- description (string): Image description
- public (boolean): Indicates whether the Image is public or not (i.e. visible to all or only to the owner?)
- owner (object): Uploader of the Image. See [User](user) resource for detailed description.
- content (string): Returned image content as Base64 string.
- content_type (string): [Returned image Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml#image).
- width (integer): Returned image width
- height (integer): Returned image height
- size (integer): Returned image size in bytes

The states _id_ and _created_at_ are assigned by the Futurimages API at the moment of creation.

+ Parameters
    + id (string) ... ID of the Image
    
+ Model (application/json)
    JSON representation of Image Resource.

    + Body
    
            {
                "id": "rg"
            }
            
### Retrieve a Single Image [GET]
+ Response 200

    [Image][]            

# Group Images
The essential resources of the **Futurimages API**

## Images Collection [/images]
### List all public images [GET]

+ Response 200 (application/json)

        [{
          "id": 1, "title": "Jogging in park"
        }, {
          "id": 2, "title": "Pick-up posters from post-office"
        }]
        
# Group User
User-related resources of the **Futurimages API**

## User [/users/{login}]
A single User object. It represents a user which indirectly uses **Futurimages API** by means of a client application
to browse or upload images to Futurimages.

The User resource has the following attributes:

- login (string): email of the User
- first_name (string): User first name
- last_name (string): User last name

+ Parameters
    + login (string) ... email of the User that [is encoded](http://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) using UTF-8
    
+ Model (application/json)
    JSON representation of User Resource.

    + Body
    
            {
                "login": "futurimages@gmail.com",
                "first_name": null
                "last_name": "Futurimages"
            }

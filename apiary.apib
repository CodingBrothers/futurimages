FORMAT: 1A

# Futurimages v1 API Documentation
This describes the resources that make up the official **Futurimages v1 API**. At the moment, this API represents the only way how to access [Futurimages](http://www.futurimages.com) programatically.
It's based on REST principles and supports both, anonymous and Google Account based access.

## Current Version
The current version is `v1`. Which is also the only version available at the same time.

## Schema
All API access is over HTTPS, and accessed from the [apiv1.futurimages.com](apiv1.futurimages.com) domain.
All data is sent and received as JSON.

Blank fields are included as `null` instead of being omitted.

All timestamps are returned in ISO 8601 format:
>YYYY-MM-DDTHH:MM:SSZ

### Summary Representations
When you fetch a list of resources, the response includes a subset of the attributes for that resource.
This is the “summary” representation of the resource. (Some attributes are computationally expensive for
the API to provide. For performance reasons, the summary representation excludes those attributes.
To obtain those attributes, fetch the “detailed” representation.)

### Detailed Representations
When you fetch an individual resource, the response typically includes all attributes for that resource.
This is the “detailed” representation of the resource. (Note that authorization sometimes influences
the amount of detail included in the representation.)

The documentation provides an example response for each API method. The example response illustrates all
attributes that are returned by that method.

## Client Errors
There are three possible types of client errors on API calls that receive request bodies:

1\. Sending invalid JSON will result in a `400 Bad Request` response.

<pre><code>HTTP/1.1 400 Bad Request
Content-Length: 35

{"message": "Problems parsing JSON"}
</code></pre>

2\. Sending the wrong type of JSON values will result in a `400 Bad Request` response.

<pre><code>HTTP/1.1 400 Bad Request
Content-Length: 40

{"message": "Body should be a JSON object"}
</code></pre>
 
3\. Sending invalid fields will result in a `422 Unprocessable Entity` response.

<pre><code>HTTP/1.1 422 Unprocessable Entity
Content-Length: 149

{
    "message": "Validation Failed",
    "errors": [
        {
            "resource": "Issue",
            "field": "title",
            "code": "missing_field"
        }
    ]
}
</code></pre>

All error objects have resource and field properties so that your client can tell what the problem is.
There’s also an error code to let you know what is wrong with the field. These are the possible validation
error codes:

| Error Name | Description |
|-------|------|
| missing | This means a resource does not exist. |
| missing_field | This means a required field on a resource has not been set. |
| invalid | This means the formatting of a field is invalid. The documentation for that resource should be able to give you more specific information. |
| already_exists | This means another resource has the same value as this field. This can happen in resources that must have some unique key (such as Label names). |

If resources have custom validation errors, they will be documented with the resource.

# Group Image
Image-related resources of the **Futurimages API**

# Group Images
The essential resources of the **Futurimages API**

## Images Collection [/images]
### List all public images [GET]

+ Response 200 (application/json)

        [{
          "id": 1, "title": "Jogging in park"
        }, {
          "id": 2, "title": "Pick-up posters from post-office"
        }]
        
